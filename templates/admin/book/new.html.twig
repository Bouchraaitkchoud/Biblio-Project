{% extends 'base.html.twig' %}

{% block title %}Admin - New Book{% endblock %}

{% block stylesheets %}
    {{ parent() }}
    <link rel="stylesheet" href="{{ asset('css/style1.css') }}">
    <link rel="stylesheet" href="{{ asset('css/admin.css') }}">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
    <style>
        .author-create-form, .domain-create-form, .section-create-form {
            display: none;
            margin-top: 20px;
            padding: 15px;
            background-color: #f8f9fa;
            border-radius: 8px;
            border: 1px solid #e9ecef;
            margin-bottom: 15px;
        }
        .btn-link {
            cursor: pointer;
            color: #117986;
            font-size: 0.9rem;
            text-decoration: underline;
        }
        .btn-link:hover {
            color: #0e6655;
        }
        .select2-container--default .select2-selection--multiple {
            border-color: #ced4da;
        }
        .select2-container--default.select2-container--focus .select2-selection--multiple {
            border-color: #117986;
            box-shadow: 0 0 0 0.25rem rgba(17, 121, 134, 0.25);
        }
        .select2-container {
            width: 100% !important;
        }
        .form-label {
            font-weight: 500;
        }
    </style>
{% endblock %}

{% block body %}
    <div class="container mt-4">
        <div class="admin-nav">
            <div class="admin-nav-links">
                <a href="{{ path('admin_dashboard') }}" class="admin-nav-link">Dashboard</a>
                <a href="{{ path('admin_orders_index') }}" class="admin-nav-link">Orders</a>
                <a href="{{ path('admin_domains_index') }}" class="admin-nav-link">Domains</a>
                <a href="{{ path('admin_sections_index') }}" class="admin-nav-link">Sections</a>
                <a href="{{ path('admin_authors_index') }}" class="admin-nav-link">Authors</a>
                <a href="{{ path('admin_books_index') }}" class="admin-nav-link active">Books</a>
                <a href="{{ path('app_domains') }}" class="admin-nav-link">Main Site</a>
            </div>
            <div class="admin-user-info">
                Welcome, Admin | <a href="{{ path('app_logout') }}" style="color: white;">Logout</a>
            </div>
        </div>
        
        {% for label, messages in app.flashes %}
            {% for message in messages %}
                <div class="alert alert-{{ label }} alert-dismissible fade show">
                    {{ message }}
                    <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
                </div>
            {% endfor %}
        {% endfor %}
        
        <div class="page-header">
            <h1>Create New Book</h1>
        </div>
        
        <div class="form-container">
            <form method="post" enctype="multipart/form-data" id="bookForm">
                <div class="row">
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="title" class="form-label">Book Title</label>
                            <input type="text" class="form-control" id="title" name="title" required>
                        </div>
                        
                        <div class="mb-3">
                            <label for="description" class="form-label">Description</label>
                            <textarea class="form-control" id="description" name="description" rows="5"></textarea>
                        </div>
                        
                        <div class="mb-3">
                            <label for="publicationYear" class="form-label">Publication Year</label>
                            <input type="number" class="form-control" id="publicationYear" name="publicationYear" min="1000" max="{{ "now"|date("Y") }}">
                        </div>
                        
                        <div class="mb-3">
                            <label for="isbn" class="form-label">ISBN</label>
                            <input type="text" class="form-control" id="isbn" name="isbn">
                        </div>
                    </div>
                    
                    <div class="col-md-6">
                        <div class="mb-3">
                            <label for="coverImage" class="form-label">Cover Image</label>
                            <input type="file" class="form-control" id="coverImage" name="coverImage" accept="image/*">
                        </div>
                        
                        <div class="mb-3">
                            <label class="form-label d-block">Domain & Section</label>
                            
                            <div class="mb-2">
                                <label for="section" class="form-label">Section</label>
                                <div class="d-flex align-items-center gap-2">
                                    <select class="form-select" id="section" name="section" required>
                                        <option value="">Select a section</option>
                                        {% for section in sections %}
                                            <option value="{{ section.id }}">{{ section.name }} ({{ section.domain.name }})</option>
                                        {% endfor %}
                                    </select>
                                    <span class="btn-link" id="showSectionForm">+ New Section</span>
                                </div>
                            </div>
                            
                            <div class="section-create-form" id="sectionForm">
                                <h5>Create New Section</h5>
                                <div class="mb-3">
                                    <label for="sectionName" class="form-label">Section Name</label>
                                    <input type="text" class="form-control" id="sectionName">
                                </div>
                                
                                <div class="mb-3">
                                    <label for="sectionDomain" class="form-label">Domain</label>
                                    <div class="d-flex align-items-center gap-2">
                                        <select class="form-select" id="sectionDomain">
                                            <option value="">Select a domain</option>
                                            {% for section in sections %}
                                                {% if section.domain.id not in domainsAdded|default([]) %}
                                                    <option value="{{ section.domain.id }}">{{ section.domain.name }}</option>
                                                    {% set domainsAdded = domainsAdded|default([])|merge([section.domain.id]) %}
                                                {% endif %}
                                            {% endfor %}
                                        </select>
                                        <span class="btn-link" id="showDomainForm">+ New Domain</span>
                                    </div>
                                </div>
                                
                                <!-- Domain form -->
                                <div class="domain-create-form" id="domainForm">
                                    <h5>Create New Domain</h5>
                                    <div class="mb-3">
                                        <label for="domainName" class="form-label">Domain Name</label>
                                        <input type="text" class="form-control" id="domainName">
                                    </div>
                                    <div class="d-flex gap-2">
                                        <button type="button" class="btn btn-primary" id="createDomain">
                                            <i class="fas fa-plus"></i> Create Domain
                                        </button>
                                        <button type="button" class="btn btn-secondary" id="cancelDomain">
                                            <i class="fas fa-times"></i> Cancel
                                        </button>
                                    </div>
                                </div>
                                
                                <div class="d-flex gap-2">
                                    <button type="button" class="btn btn-primary" id="createSection">
                                        <i class="fas fa-plus"></i> Create Section
                                    </button>
                                    <button type="button" class="btn btn-secondary" id="cancelSection">
                                        <i class="fas fa-times"></i> Cancel
                                    </button>
                                </div>
                            </div>
                        </div>
                        
                        <div class="mb-3">
                            <label for="authors" class="form-label">Authors</label>
                            <div class="d-flex flex-column">
                                <select class="form-select" id="authors" name="authors[]" multiple required>
                                    {% for author in authors %}
                                        <option value="{{ author.id }}">{{ author.name }}</option>
                                    {% endfor %}
                                </select>
                                <small class="form-text text-muted mt-1">Select multiple authors by holding Ctrl (or Cmd on Mac) and clicking.</small>
                                <span class="btn-link align-self-start mt-2" id="showAuthorForm">+ Add New Author</span>
                            </div>
                        </div>
                        
                        <!-- Author form -->
                        <div class="author-create-form" id="authorForm">
                            <h5>Create New Author</h5>
                            <div class="mb-3">
                                <label for="authorName" class="form-label">Author Name</label>
                                <input type="text" class="form-control" id="authorName">
                            </div>
                            <div class="mb-3">
                                <label for="authorBio" class="form-label">Biography</label>
                                <textarea class="form-control" id="authorBio" rows="3"></textarea>
                            </div>
                            <div class="d-flex gap-2">
                                <button type="button" class="btn btn-primary" id="createAuthor">
                                    <i class="fas fa-plus"></i> Create Author
                                </button>
                                <button type="button" class="btn btn-secondary" id="cancelAuthor">
                                    <i class="fas fa-times"></i> Cancel
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
                
                <div class="d-flex gap-2 mt-4">
                    <button type="submit" class="btn btn-primary">
                        <i class="fas fa-save"></i> Create Book
                    </button>
                    <a href="{{ path('admin_books_index') }}" class="btn btn-secondary">
                        <i class="fas fa-arrow-left"></i> Back to List
                    </a>
                </div>
            </form>
        </div>
    </div>
    
    <!-- Message modal -->
    <div class="modal fade" id="messageModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="messageModalTitle"></h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="messageModalBody">
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
{% endblock %}

{% block javascripts %}
    {{ parent() }}
    <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Initialize Select2 for authors
            $('#authors').select2({
                placeholder: 'Select authors',
                width: '100%'
            });
            
            // Author form toggle
            const showAuthorForm = document.getElementById('showAuthorForm');
            const authorForm = document.getElementById('authorForm');
            const createAuthorBtn = document.getElementById('createAuthor');
            const cancelAuthorBtn = document.getElementById('cancelAuthor');
            const authorsSelect = document.getElementById('authors');
            
            // Section form toggle
            const showSectionForm = document.getElementById('showSectionForm');
            const sectionForm = document.getElementById('sectionForm');
            const createSectionBtn = document.getElementById('createSection');
            const cancelSectionBtn = document.getElementById('cancelSection');
            const sectionSelect = document.getElementById('section');
            
            // Domain form toggle
            const showDomainForm = document.getElementById('showDomainForm');
            const domainForm = document.getElementById('domainForm');
            const createDomainBtn = document.getElementById('createDomain');
            const cancelDomainBtn = document.getElementById('cancelDomain');
            const sectionDomainSelect = document.getElementById('sectionDomain');
            
            // Message modal
            const messageModal = new bootstrap.Modal(document.getElementById('messageModal'));
            const messageModalTitle = document.getElementById('messageModalTitle');
            const messageModalBody = document.getElementById('messageModalBody');
            
            // Show/hide author form
            showAuthorForm.addEventListener('click', function() {
                authorForm.style.display = 'block';
                document.getElementById('authorName').focus();
            });
            
            cancelAuthorBtn.addEventListener('click', function() {
                authorForm.style.display = 'none';
                document.getElementById('authorName').value = '';
                document.getElementById('authorBio').value = '';
            });
            
            // Show/hide section form
            showSectionForm.addEventListener('click', function() {
                sectionForm.style.display = 'block';
                document.getElementById('sectionName').focus();
            });
            
            cancelSectionBtn.addEventListener('click', function() {
                sectionForm.style.display = 'none';
                document.getElementById('sectionName').value = '';
                sectionDomainSelect.value = '';
                domainForm.style.display = 'none';
            });
            
            // Show/hide domain form
            showDomainForm.addEventListener('click', function() {
                domainForm.style.display = 'block';
                document.getElementById('domainName').focus();
            });
            
            cancelDomainBtn.addEventListener('click', function() {
                domainForm.style.display = 'none';
                document.getElementById('domainName').value = '';
            });
            
            // Create domain via AJAX
            createDomainBtn.addEventListener('click', function() {
                const domainName = document.getElementById('domainName').value;
                
                if (domainName.trim() === '') {
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'Domain name cannot be empty.';
                    messageModal.show();
                    return;
                }
                
                // Send AJAX request
                fetch('{{ path('admin_domain_new') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded',
                        'X-Requested-With': 'XMLHttpRequest'
                    },
                    body: new URLSearchParams({
                        'name': domainName
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Add new domain to the select
                        const option = document.createElement('option');
                        option.value = data.id;
                        option.textContent = data.name;
                        sectionDomainSelect.appendChild(option);
                        
                        // Select the new domain
                        sectionDomainSelect.value = data.id;
                        
                        // Hide the form
                        domainForm.style.display = 'none';
                        document.getElementById('domainName').value = '';
                        
                        // Show success message
                        messageModalTitle.textContent = 'Success';
                        messageModalBody.textContent = 'Domain created successfully.';
                        messageModal.show();
                    } else {
                        messageModalTitle.textContent = 'Error';
                        messageModalBody.textContent = data.error || 'An error occurred.';
                        messageModal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'An error occurred while creating the domain.';
                    messageModal.show();
                });
            });
            
            // Create section via AJAX
            createSectionBtn.addEventListener('click', function() {
                const sectionName = document.getElementById('sectionName').value;
                const domainId = sectionDomainSelect.value;
                
                if (sectionName.trim() === '') {
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'Section name cannot be empty.';
                    messageModal.show();
                    return;
                }
                
                if (domainId === '') {
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'Please select a domain.';
                    messageModal.show();
                    return;
                }
                
                // Send AJAX request
                fetch('{{ path('admin_section_quick_create') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        'name': sectionName,
                        'domain': domainId
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Add new section to the select
                        const option = document.createElement('option');
                        option.value = data.id;
                        option.textContent = `${data.name} (${data.domainName})`;
                        sectionSelect.appendChild(option);
                        
                        // Select the new section
                        sectionSelect.value = data.id;
                        
                        // Hide the form
                        sectionForm.style.display = 'none';
                        document.getElementById('sectionName').value = '';
                        sectionDomainSelect.value = '';
                        
                        // Show success message
                        messageModalTitle.textContent = 'Success';
                        messageModalBody.textContent = 'Section created successfully.';
                        messageModal.show();
                    } else {
                        messageModalTitle.textContent = 'Error';
                        messageModalBody.textContent = data.error || 'An error occurred.';
                        messageModal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'An error occurred while creating the section.';
                    messageModal.show();
                });
            });
            
            // Create author via AJAX
            createAuthorBtn.addEventListener('click', function() {
                const authorName = document.getElementById('authorName').value;
                const authorBio = document.getElementById('authorBio').value;
                
                if (authorName.trim() === '') {
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'Author name cannot be empty.';
                    messageModal.show();
                    return;
                }
                
                // Send AJAX request
                fetch('{{ path('admin_author_quick_create') }}', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/x-www-form-urlencoded'
                    },
                    body: new URLSearchParams({
                        'name': authorName,
                        'bio': authorBio
                    })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Add new author to the select
                        const option = new Option(data.name, data.id, true, true);
                        $('#authors').append(option).trigger('change');
                        
                        // Hide the form
                        authorForm.style.display = 'none';
                        document.getElementById('authorName').value = '';
                        document.getElementById('authorBio').value = '';
                        
                        // Show success message
                        messageModalTitle.textContent = 'Success';
                        messageModalBody.textContent = 'Author created successfully.';
                        messageModal.show();
                    } else {
                        messageModalTitle.textContent = 'Error';
                        messageModalBody.textContent = data.error || 'An error occurred.';
                        messageModal.show();
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    messageModalTitle.textContent = 'Error';
                    messageModalBody.textContent = 'An error occurred while creating the author.';
                    messageModal.show();
                });
            });
        });
    </script>
{% endblock %} 